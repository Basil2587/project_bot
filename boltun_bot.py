import asyncio
import platform

import requests

import telebot
import os
import time
from multiprocessing.context import Process
import schedule
from bs4 import BeautifulSoup
from pathlib import Path
from random import choice
from glob import glob
from requests import get
from telebot import types
from fuzzywuzzy import fuzz
from dotenv import load_dotenv


if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

load_dotenv()

# –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
site = 'https://yandex.ru/images/search?from=tabbar&text=%D1%81%D0%B8%D1%81%D1%8C%D0%BA%D0%B8'
response = requests.get(site)
soup = BeautifulSoup(response.text, 'html.parser')
img_tags = soup.find_all('img')
urls = [img['src'] for img in img_tags]
urls = list(filter(None, urls))

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('TOKEN_GIRL_BOT'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤
list_phrases = []
if os.path.exists('data/b2.txt'):
    file_path = open('data/b2.txt', 'r', encoding='UTF-8')
    for x in file_path:
        if len(x.strip()) > 2:
            list_phrases.append(x.strip().lower())
    file_path.close()


# –° –ø–æ–º–æ—â—å—é fuzzywuzzy –≤—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂—É—é —Ñ—Ä–∞–∑—É –∏ –≤—ã–¥–∞–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
def answer_question(text):
    try:
        text = text.lower().strip()
        if os.path.exists('data/b2.txt'):
            a = 0
            n = 0
            nn = 0
            for q in list_phrases:
                if 'u: ' in q:
                    # –° –ø–æ–º–æ—â—å—é fuzzywuzzy –ø–æ–ª—É—á–∞–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
                    string_comparison = (fuzz.token_sort_ratio(q.replace('u: ', ''), text))
                    if string_comparison > a and string_comparison != a:
                        a = string_comparison
                        nn = n
                n = n + 1
            similar_phrase = list_phrases[nn + 1]
            return similar_phrase
        else:
            return '–û—à–∏–±–∫–∞'
    except:
        return '–û—à–∏–±–∫–∞'


# –ö–æ–º–∞–Ω–¥–∞ start
@bot.message_handler(commands=["start"])
def start(message, res=False):
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–°–∏—Å—å–∫–∏", "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–∞"]
    markup.add(*buttons)
    # bot.send_message(m.chat.id, '–Ø –Ω–∞ —Å–≤—è–∑–∏. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ü—Ä–∏–≤–µ—Ç )')
    bot.send_message(message.chat.id, '\n–Ø –Ω–∞ —Å–≤—è–∑–∏. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ü—Ä–∏–≤–µ—Ç –∏–ª–∏\n'
                                      '–ù–∞–∂–º–∏—Ç–µ: \n–ù–∞ –∫–Ω–æ–ø–∫—É', reply_markup=markup)


@bot.message_handler(commands=["game"])
def spn_game(message):
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton("–ö–∞–º–µ–Ω—å", callback_data="–∫–∞–º–µ–Ω—å"),
               types.InlineKeyboardButton("–ë—É–º–∞–≥–∞", callback_data="–±—É–º–∞–≥–∞"),
               types.InlineKeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã", callback_data="–Ω–æ–∂–Ω–∏—Ü—ã")]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ '–∫–∞–º–µ–Ω—å', '–±—É–º–∞–≥–∞', '–Ω–æ–∂–Ω–∏—Ü—ã' ", reply_markup=keyboard)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@bot.message_handler(content_types=["photo"])
def handle_image(message):
    size_folder = sum([f.stat().st_size for f in Path("image", "photos").glob("**/*")])
    mb = size_folder / 1000000
    try:
        if mb < 30:
            file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            src = str(Path('image')) + '/' + file_info.file_path
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
            bot.reply_to(message, "–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        else:
            bot.reply_to(message, "–ú–Ω–æ–≥–æ —Ñ–æ—Ç–æ–∫...")
        if mb > 30:
            path = 'image/photos/'
            sorted_file = sorted(((os.path.getctime(name), name) for name in os.listdir() if os.path.isfile(name)))
            early_file = sorted_file[0][1]
            os.remove(path + early_file)

    except Exception as e:
        bot.reply_to(message, e)


@bot.message_handler(content_types=["text"])
def handle_text(message):
    # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
    new_file_path = open('data/' + str(message.chat.id)
                         + '_' + str(message.chat.username) + '_log.txt', 'a', encoding='UTF-8')
    if message.text.lower() == '—Å–∏—Å—å–∫–∏':
        picture_site = choice(urls)
        get_img = get('https:' + picture_site).content
        bot.send_photo(message.chat.id, get_img)
    elif message.text.lower() == '–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–∞':
        lists = glob('image/photos/*')  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç–∏–Ω–æ–∫
        picture = choice(lists)
        bot.send_photo(message.chat.id, photo=open(picture, 'rb'))

    else:
        text_answer = answer_question(message.text)
        new_file_path.write('u: ' + message.text + '\n' + text_answer + '\n')
        new_file_path.close()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        bot.send_message(message.chat.id, text_answer)


@bot.callback_query_handler(func=lambda call: True)
def handle(call):
    game_dict = {"–∫–∞–º–µ–Ω—å": 'ü™®', "–±—É–º–∞–≥–∞": 'üìÉ', "–Ω–æ–∂–Ω–∏—Ü—ã": '‚úÇ'}
    word_list = [i for i in game_dict.keys()]
    computer_action = choice(word_list)
    if call.data == computer_action:
        bot.answer_callback_query(
            call.id, text=f"–Ø –≤—ã–±—Ä–∞–ª–∞ {computer_action} {game_dict[computer_action]}.\n –ù–∏—á—å—è!!", show_alert=True)
    elif call.data == "–∫–∞–º–µ–Ω—å":
        if computer_action == "–Ω–æ–∂–Ω–∏—Ü—ã":
            bot.answer_callback_query(
                call.id,
                text=f"–Ø –≤—ã–±—Ä–∞–ª–∞ {computer_action}{game_dict[computer_action]}.\n –ö–∞–º–µ–Ω—å –±—å–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                show_alert=True)
        else:
            bot.answer_callback_query(
                call.id,
                text=f"–Ø –≤—ã–±—Ä–∞–ª–∞ {computer_action}{game_dict[computer_action]}.\n"
                     f" –ë—É–º–∞–≥–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", show_alert=True)
    elif call.data == "–±—É–º–∞–≥–∞":
        if computer_action == "–∫–∞–º–µ–Ω—å":
            bot.answer_callback_query(
                call.id,
                text=f"–Ø –≤—ã–±—Ä–∞–ª–∞ {computer_action}{game_dict[computer_action]}.\n"
                     f" –ë—É–º–∞–≥–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å! –í—ã –ø–æ–±–µ–¥–∏–ª–∏.", show_alert=True)
        else:
            bot.answer_callback_query(
                call.id,
                text=f"–Ø –≤—ã–±—Ä–∞–ª–∞ {computer_action} {game_dict[computer_action]}.\n"
                     f" –ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –±—É–º–∞–≥—É! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", show_alert=True)
    elif call.data == "–Ω–æ–∂–Ω–∏—Ü—ã":
        if computer_action == "–±—É–º–∞–≥–∞":
            bot.answer_callback_query(
                call.id,
                text=f"–Ø –≤—ã–±—Ä–∞–ª–∞ {computer_action} {game_dict[computer_action]}.\n"
                     f"–ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –±—É–º–∞–≥—É! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!", show_alert=True)
        else:
            bot.answer_callback_query(
                call.id,
                text=f"–Ø –≤—ã–±—Ä–∞–ª–∞ {computer_action} {game_dict[computer_action]}.\n"
                     f"–ö–∞–º–µ–Ω—å –±—å–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", show_alert=True)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def send_message1():
    picture = choice(urls)
    site_img = get('https:' + picture).content
    bot.send_photo(485409413, site_img)
    # bot.send_message(1286749978, 'TEXT')


def send_message2():
    bot.send_message(485409413, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!')


def send_message3():
    bot.send_message(485409413, '–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫!!!')


schedule.every(60).minutes.do(send_message1)
schedule.every().day.at("09:00").do(send_message2)
schedule.every().day.at("17:00").do(send_message3)


class ScheduleMessage():
    def send_schedule():
        while True:
            schedule.run_pending()
            time.sleep(1)

    def start_process():
        p1 = Process(target=ScheduleMessage.send_schedule, args=())
        p1.start()


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    ScheduleMessage.start_process()
    try:
        bot.polling(none_stop=True)
    except:
        pass
